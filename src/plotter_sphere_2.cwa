// Import necessary MicroW8 API functions and memory
import "env.memory" memory(4); // Request 4 pages (256KB) of memory
import "env.cls" fn cls(i32); // To clear the screen
import "env.time" fn time() -> f32; // Import time function for animation
import "env.sin" fn sin(f32) -> f32; // Sine function
import "env.cos" fn cos(f32) -> f32; // Cosine function
import "env.setPixel" fn setPixel(i32, i32, i32); // Function to draw individual pixels
import "env.fmod" fn fmod(f32, f32) -> f32; // Import fmod for phase wrapping
// sqrt and max are typically built-in in WASM/CurlyWASM, no import needed.


// Import mathematical constant PI
const PI: f32 = 3.14159265;


// --- Constants ---
const SCREEN_WIDTH_F: f32 = 320.0; // Screen width in pixels (float)
const SCREEN_HEIGHT_F: f32 = 240.0; // Screen height in pixels (float)
const CENTER_X: f32 = SCREEN_WIDTH_F / 2.0; // X-coordinate of the screen center
const CENTER_Y: f32 = SCREEN_HEIGHT_F / 2.0; // Y-coordinate of the screen center

// Sphere parameters
const SPHERE_RADIUS: f32 = 80.0; // Radius of the animated sphere
const VIEWER_DISTANCE: f32 = 200.0; // Distance from the viewer to the projection plane (for perspective)

// Rotation speeds around X and Y axes
const ROT_SPEED_X: f32 = 0.3;
const ROT_SPEED_Y: f32 = 0.4;

// Parameters for dividing the sphere into rings
const NUM_RINGS: i32 = 64; // Number of horizontal rings (latitudes)
const MIN_POINTS_PER_RING: i32 = 8; // Minimum number of points even on the smallest rings
const MAX_POINTS_PER_RING: i32 = 64; // Maximum number of points on the largest ring (equator)

// Dodatkowe punkty przy biegunach - stała liczba dodawana do minimum
// Po zmianie rozkładu Z, ta stała może wymagać dostosowania lub stać się mniej potrzebna
const ADDITIONAL_POINTS_AT_POLES: i32 = 8; // Nieco zmniejszona wartość, zobaczymy efekt

// Color range for the points
const COLOR_BASE: i32 = 0xf0; // Starting color index
const COLOR_RANGE_SIZE: f32 = 16.0; // Number of colors in the range (0xf0 to 0xff)

// Speed at which the color gradient travels along the curve (around each ring)
const COLOR_TRAVEL_SPEED: f32 = 2.0; // Controls how fast the color animates


// --- Initialization Function ---
// Called once when the module is loaded
export fn start() {
    // No specific initialization needed.
}

// --- Main Update Function ---
// Called each frame to render the effect
export fn upd() {
    // Clear the screen with black color (color index 0)
    cls(0);

    // Get current time for animation
    let current_time: f32 = time();

    // Calculate rotation angles based on time
    let inline rot_x = current_time * ROT_SPEED_X;
    let inline rot_y = current_time * ROT_SPEED_Y;

    // Pre-calculate sines and cosines of rotation angles for efficiency
    let inline cos_rot_x = cos(rot_x);
    let inline sin_rot_x = sin(rot_x);
    let inline cos_rot_y = cos(rot_y);
    let inline sin_rot_y = sin(rot_y);

    // Loop through each horizontal ring (latitude)
    let ring_index: i32 = 0;
    loop ring_loop { // Loop over the number of rings
        // Convert ring index to float
        let inline ring_f = ring_index as f32;

        // --- Calculate Z-coordinate and Radius for this ring ---
        // Use cosine distribution for Z to pack rings denser near poles
        // Angle from 0 to PI as ring_index goes from 0 to NUM_RINGS - 1
        let inline ring_theta = PI * ring_f / (NUM_RINGS - 1) as f32;
        let inline ring_z = SPHERE_RADIUS * cos(ring_theta);


        // Calculate the radius of the circle in the XY plane for this Z
        let inline ring_radius_sq = SPHERE_RADIUS * SPHERE_RADIUS - ring_z * ring_z;
        // Ensure radius squared is not negative due to float inaccuracies near poles
        let inline ring_radius = sqrt(max(0.0, ring_radius_sq));

        // --- Determine number of points on this ring ---
        // Number of points is proportional to the ring radius, with a minimum
        let inline points_on_ring_f = (ring_radius / SPHERE_RADIUS) * MAX_POINTS_PER_RING as f32;
        // Corrected: Use max with f32 before casting to i32
        // Zmodyfikowano: Dodano stałą liczbę punktów dla poprawy gęstości przy biegunach
        let inline base_points = max(MIN_POINTS_PER_RING as f32, points_on_ring_f);
        // Now adding points inversely proportional to radius is less critical with cosine Z distribution,
        // but can still help fine-tune density. Let's use a smaller factor or simply rely on base_points + linear_scaling.
        // Let's simplify the points_on_ring calculation after cosine Z distribution
        let inline points_on_ring: i32 = max(MIN_POINTS_PER_RING as f32, (ring_radius / SPHERE_RADIUS * MAX_POINTS_PER_RING as f32)) as i32;


        // Loop through each point on the current ring
        let point_index: i32 = 0;
        loop point_loop { // Loop over the points in this ring
            // Convert point index to float
            let inline point_f = point_index as f32;

            // --- Calculate Angle Phi for this point on the ring ---
            // Phi ranges from 0 to 2*PI around the circle
            let inline phi = 2.0 * PI * point_f / points_on_ring as f32;

            // --- Calculate 3D point on Sphere Surface ---
            // X and Y are on the circle, Z is the ring's Z
            let inline x = ring_radius * cos(phi);
            let inline y = ring_radius * sin(phi);
            let inline z = ring_z; // This is the Z of the ring

            // --- Apply 3D Rotation (Y then X) ---
            // Rotate around Y-axis
            let inline x1 = x * cos_rot_y + z * sin_rot_y;
            let inline y1 = y; // Y is unchanged by Y-rotation
            let inline z1 = -x * sin_rot_y + z * cos_rot_y;

            // Rotate around X-axis
            let inline x_rot = x1; // X is unchanged by X-rotation
            let inline y_rot = y1 * cos_rot_x - z1 * sin_rot_x;
            let inline z_rot = y1 * sin_rot_x + z1 * cos_rot_x;

            // --- Apply Perspective Projection ---
            let inline perspective_z = VIEWER_DISTANCE + z_rot; // Use z_rot for depth check

            // Only draw points in front of the viewer (where perspective_z > 0)
            if perspective_z > 0.1 { // Use a small threshold
                let inline projected_x = CENTER_X + (VIEWER_DISTANCE * x_rot) / perspective_z; // Use x_rot
                let inline projected_y = CENTER_Y + (VIEWER_DISTANCE * y_rot) / perspective_z; // Use y_rot

                // --- Color Calculation ---
                // Calculate the phase used for coloring, based on phi and time for animation
                let inline color_phase = phi + current_time * COLOR_TRAVEL_SPEED;

                // Use the color_phase to determine the color, wrapping it around 2*PI
                // Map the wrapped phase (0 to 2*PI) to the color range (0 to COLOR_RANGE_SIZE - 1)
                let inline wrapped_color_phase = fmod(color_phase, 2.0 * PI);
                // Ensure wrapped_color_phase is non-negative
                let inline positive_wrapped_color_phase = if wrapped_color_phase < 0.0 { wrapped_color_phase + 2.0 * PI } else { wrapped_color_phase };

                // Map the phase to a value between 0.0 and COLOR_RANGE_SIZE - 1.0
                let inline color_f = positive_wrapped_color_phase / (2.0 * PI) * (COLOR_RANGE_SIZE - 1.0);

                // Convert to integer color index and add the base color offset
                let inline color_index: i32 = COLOR_BASE + (color_f as i32);

                // --- Draw the pixel ---
                // Convert float coordinates to integer pixel coordinates
                setPixel(projected_x as i32, projected_y as i32, color_index);
            }


            // Move to the next point on the ring
            branch_if (point_index := point_index + 1) < points_on_ring: point_loop;
        } // End of point_loop

        // Move to the next ring
        branch_if (ring_index := ring_index + 1) < NUM_RINGS: ring_loop;
    } // End of ring_loop
}